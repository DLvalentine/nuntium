--- GENERAL/EVENTUALLY ---
- Take a look at class structure again, make more use of inheritance where it makes sense. 
- might make sense to add a JSON reader function to util.rb, and then make specific uses of it in the aggregator classes
- come up with config template builder - then ignore your own conf. That way people don't have to deal with your junk lmao
- create gem for this, for "installer"
- Basic RSSHub integration is done, need to support Mac/linux, update docs, and write install script for this whole package - to include... Ruby, Node.. everything.

--- BUGFIX / CRITICAL ---
- Add more details to README, to include the AHK files I included, RSSHub (if we continue to use it), keyboard shortcuts, etc.
- mac/nix compatible scripts (primarily for RSSHub), or instructions in the README
- ^ similarly, dependencies that are needed there should go in README or become an install script (like for Node)
- ^ install scripts, just in general
- Update the RSS aggregator to refresh every 2 hours, tune this. Or, make it configurable

--- AUTO GENERATED ---
aggregator/aggregator.rb:# TODO / NOTE: This was an attempt many years ago by me to play around with inheritence/polymorphism in Ruby... it did not go as planned.
aggregator/aggregator.rb:  ## TODO: actually this will be useful, I just need to implement it correctly.
aggregator/aggregator.rb:  ## TODO: Only here to serve as an implementation reminder. Remove for prod.
aggregator/disk.rb:  # TODO: make a file directory attr in config.json, since
aggregator/disk.rb:  #  TODO: an optimization would be to check the size first, and skip
aggregator/rss.rb:      # TODO: maybe move this into a util class if we want this to be the way to log errors (because of how CLI works)
aggregator/rss.rb:  ### TODO: probably candidate for pulling out into method on Aggregator
aggregator/stock.rb:        if symbol_length > 5 && index > 4 # TODO: Handle this in batches, so we can support more than 10 symbols, staggered
aggregator/stock.rb:          # TODO: this fires even if we have it in a cached file. Not the end of the world, but optimally we want to redo this...
aggregator/stock.rb:    # TODO: DRY this up, make sure it isn't being called too much (see init_cache)
aggregator/stock.rb:    # TODO: simple file operations like this are a good candidate for optimization/moving
aggregator/stock.rb:  # TODO: DRY this up
aggregator/stock.rb:    #### TODO: Break this out into a new function, since #quote uses it, too. Not doing it now for the sake of time.
aggregator/stock.rb:    # TODO: DRY this up, make sure it isn't being called too much (see init_cache)
aggregator/stock.rb:    # TODO: simple file operations like this are a good candidate for optimization/moving
aggregator/stock.rb:    ### TODO: candidate for pulling out into method on Aggregator
aggregator/stock.rb:    ### TODO: candidate for optimization
display/display.rb:# TODO / NOTE: This was an attempt many years ago by me to play around with inheritence/polymorphism in Ruby... it did not go as planned.
display/display.rb:  ## TODO: Only here to serve as an implementation reminder. Remove for prod.
nuntium.rb:# TODO: Add improved loading icon/thing while chunking data
nuntium.rb:  # TODO: make sure this thread gets killed...after you add in the frfr invalidation...
nuntium.rb:  # TODO: Mac compat - basically a ruby script I guess... or fallback scripts
nuntium.rb:# TODO: invalidate cache frfr when they are old or mismatched...this is happening at the aggregator level right now
nuntium.rb:# TODO: this might be better off in util?
nuntium.rb:# TODO: this might be better off in util?
nuntium.rb:    # TODO: make sure this thread gets killed... include better loading text info?
nuntium.rb:      # TODO: - Mac compatibility...
todo.bat:git grep -EIi "TODO|FIXME" >> TODO.txt
util.rb:# TODO: figure out which one of these isn't needed here, move to keyboard.rb
util.rb:  ### TODO: this might make more sense as a Display::Cli method.
