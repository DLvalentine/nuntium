--- GENERAL/EVENTUALLY ---
- rein in the scope of this, update the repo docs to reflect it. Going to focus on CLI and GUI for now, and maybe come up with one more aggregator?
    - The GUI for this could be simple - just a Rails app with auto, infinite scroll down the page? With options for pause and speed increase/decrease
- I want to come up with a way to... release this with a DB of rss feeds that exist? There doesn't seem to be a way to discover RSS feeds easily
- Take a look at class structure again, make more use of inheritance where it makes sense. 
- use super for inherited methods, duh
- might make sense to add a JSON reader function to util.rb, and then make specific uses of it in the aggregator classes
- come up with config template for 1.0
- add keyboard shortcuts to README
- create gem for this, for "installer"
- Basic RSSHub integration is done, need to support Mac/linux, update docs, and write install script for this whole package - to include... Ruby, Node.. everything.
- ^ similarly, should probably get some mac-compatible dev scripts

--- BUGFIX / CRITICAL ---
- Figure a better way to display "loading" and message text, and any errors that come up during
- Improve loading text based on cache/files, and also based on the aggregators that are enabled
- Improve throttling issue with stocks, apply to rss feeds
- ensure stock/rss refresh in background! after shift -> empty
- Error handling for RSS feeds that don't exist, or dead links (Reuters pulled theirs, and weird errors started happening on my end)
- Look into why http/too many requests is firing. Might need to jitter the rss requests. I reduced the number of feeds in the default conf for now. Also make error handling for that -> seems to just be reddit...
- come up with CLI options => override config stuff
- be able to handle more than 10 stock symbols, eventually
- Add more details to README, to include the ahk stuff I added as a bonus to our Windows users out there <3
- Update the RSS aggregator to refresh every 2 hours, tune this. Or, make it configurable
- There's a weird bug where after refreshing, the app breaks on newlines a bunch. Dunno why
- Finish Wallabag integration at some point - right now just using chrome extension

--- AUTO GENERATED ---
.rubocop.yml:# TODO: Find/improve trouble spots, if possible
aggregator/aggregator.rb:  ## TODO: actually this will be useful, I just need to implement it correctly.
aggregator/aggregator.rb:  ## TODO: Only here to serve as an implementation reminder. Remove for prod.
aggregator/disk.rb:  # TODO: make a file directory attr in config.json, since
aggregator/disk.rb:  #  TODO: an optimization would be to check the size first, and skip
aggregator/rss.rb:      Util.clear_term # TODO: did this work? When the feed refreshes, we get some weird line clearing stuff... Started happening after RSSHub integ
aggregator/rss.rb:    ## todo: shift probaly not the right thing... or if it is, need to rewrite cache...
aggregator/rss.rb:  ### TODO: probably candidate for pulling out into method on Aggregator
aggregator/stock.rb:        if symbol_length > 5 && index > 4 # TODO: Handle this in batches, so we can support more than 10 symbols, staggered
aggregator/stock.rb:          # TODO: this fires even if we have it in a cached file. Not the end of the world, but optimally we want to redo this...
aggregator/stock.rb:    # TODO: DRY this up, make sure it isn't being called too much (see init_cache)
aggregator/stock.rb:    # TODO: simple file operations like this are a good candidate for optimization/moving
aggregator/stock.rb:    #### TODO: Break this out into a new function, since #quote uses it, too. Not doing it now for the sake of time.
aggregator/stock.rb:    # TODO: DRY this up, make sure it isn't being called too much (see init_cache)
aggregator/stock.rb:    # TODO: simple file operations like this are a good candidate for optimization/moving
aggregator/stock.rb:    ### TODO: candidate for pulling out into method on Aggregator
aggregator/stock.rb:    ### TODO: candidate for optimization
display/display.rb:  ## TODO: Only here to serve as an implementation reminder. Remove for prod.
nuntium.rb:# TODO: Add improved loading icon/thing while chunking data
nuntium.rb:  # TODO: make sure this thread gets killed...after you add in the frfr invalidation... include better loading text info?
nuntium.rb:  # TODO: Mac compat - basically a ruby script I guess... or fallback scripts
nuntium.rb:# TODO: invalidate cache frfr when they are old or mismatched...this is happening at the aggregator level right now
nuntium.rb:# TODO: this might be better off in util?
nuntium.rb:# TODO: this might be better off in util?
nuntium.rb:    # TODO: make sure this thread gets killed... include better loading text info?
nuntium.rb:      # TODO - Mac compatibility...
todo.bat:git grep -EIi "TODO|FIXME" >> TODO.txt
util.rb:# TODO: figure out which one of these isn't needed here, move to keyboard.rb
util.rb:  ### TODO: this might make more sense as a Display::Cli method.
